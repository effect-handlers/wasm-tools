(module
  (type $pfun (;0;) (func (result i32)))
  (type $cfun (;1;) (func (param i32) (result i32)))
  (type $producer (;2;) (cont $pfun))
  (type $consumer (;3;) (cont $cfun))
  (type (;4;) (func (param i32)))
  (type (;5;) (func (param (ref 2) (ref 3))))
  (import "pipes" "send" (tag (;0;) (type 4) (param i32)))
  (import "pipes" "receive" (tag (;1;) (type $pfun) (result i32)))
  (import "pipes" "pipe" (func $pipe (;0;) (type 5)))
  (import "spectest" "print_i32" (func $log (;1;) (type 4)))
  (func $nats (;2;) (type $cfun) (param $n i32) (result i32)
    loop $l ;; label = @1
      i32.const -1
      call $log
      local.get $n
      call $log
      local.get $n
      suspend 0
      local.get $n
      i32.const 1
      i32.add
      local.set $n
      br 0 (;@1;)
    end
    unreachable
  )
  (func $sum (;3;) (type $cfun) (param $dummy i32) (result i32)
    (local $i i32) (local $a i32)
    i32.const 10
    local.set $i
    i32.const 0
    local.set $a
    loop $l ;; label = @1
      local.get $a
      suspend 1
      i32.add
      local.set $a
      i32.const -2
      call $log
      local.get $a
      call $log
      local.get $i
      i32.const 1
      i32.sub
      local.set $i
      local.get $i
      i32.const 0
      i32.ne
      br_if 0 (;@1;)
    end
    local.get $a
    return
  )
  (func (;4;) (type 4) (param $n i32)
    local.get $n
    ref.func $nats
    cont.new $consumer
    cont.bind $consumer $producer
    ref.func $sum
    cont.new $consumer
    call $pipe
  )
  (export "run" (func 4))
  (elem (;0;) declare func $nats $sum)
)