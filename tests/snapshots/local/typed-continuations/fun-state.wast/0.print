(module $state
  (type $gf (;0;) (func (param i32) (result i32)))
  (type $sf (;1;) (func (result i32)))
  (type $gk (;2;) (cont $gf))
  (type $sk (;3;) (cont $sf))
  (type (;4;) (func (param i32)))
  (type (;5;) (func (param (ref 2) i32) (result i32)))
  (type (;6;) (func (result i32 (ref 3))))
  (type (;7;) (func (param i32 (ref 3)) (result i32)))
  (func $getting (;0;) (type 5) (param $k (ref 2)) (param $s i32) (result i32)
    block $on_get (result (ref 2)) ;; label = @1
      block $on_set (type 6) (result i32 (ref 3)) ;; label = @2
        local.get $s
        local.get $k
        resume $gk (tag 0 1 (;@1;))(tag 1 0 (;@2;))
        return
      end
      return_call $setting
    end
    local.get $s
    return_call $getting
  )
  (func $setting (;1;) (type 7) (param $s i32) (param $k (ref 3)) (result i32)
    block $on_get (result (ref 2)) ;; label = @1
      block $on_set (type 6) (result i32 (ref 3)) ;; label = @2
        local.get $k
        resume $sk (tag 0 1 (;@1;))(tag 1 0 (;@2;))
        return
      end
      return_call $setting
    end
    local.get $s
    return_call $getting
  )
  (func $f (;2;) (type $sf) (result i32)
    i32.const 7
    suspend 1
    suspend 0
    i32.const 2
    i32.const 3
    suspend 1
    i32.const 3
    suspend 0
    i32.add
    i32.mul
    i32.add
  )
  (func (;3;) (type $sf) (result i32)
    i32.const 0
    ref.func $f
    cont.new $sk
    call $setting
  )
  (tag (;0;) (type $sf) (result i32))
  (tag (;1;) (type 4) (param i32))
  (export "run" (func 3))
  (elem (;0;) declare func $f)
)